{"version":3,"file":"static/webpack/static/development/pages/index.js.e0cebb15332f67d8ca7f.hot-update.js","sources":["webpack:///./components/cardGame/gameBoard.js"],"sourcesContent":["import React, {Component} from 'react'\nimport styled from 'styled-components'\nimport CardSlot from './cardSlot'\nimport CommandLine from './commandLine'\nimport {updateGameboard, pushGameboard} from '../../redux/actions/api'\n\nexport default class GameBoard extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\tslots:null\n\t\t}\n\t}\n\n\tcomponentWillMount(){\n\n\t//subscribe to websocket events here\n\tupdateGameboard((err, slots) => {\n\t\tconsole.log(slots)\n\t\tthis.setState({ slots })\n\t})\n\n\tconst slots = []\n\n\tfor (let h=0;h<3;h++){\n\t\tslots.push([])\n\t\tfor (let i=0;i<4;i++){\n\t\t\tslots[h].push({\n\t\t\t\trow:h,\n\t\t\t\tcolumn:i,\n\t\t\t\tcard:null\n\t\t\t})\n\t\t}\t\n\t}\n\tthis.setState({slots})\n\t}\n\n\tturnPoss = (poss) => {\n\t\treturn (1 - poss)\n\t}\n\n\tflipCard = (ind,index,card) => {\n\t\tconst slots = [...this.state.slots]\n\n\t\t//flip possession between 1 and \n\t\tslots[ind][index].card.poss = this.turnPoss(card.poss)\n\n\t\tconst row = ind\n\t\tconst column = index\n\n\t\t//ripple\n\t\tslots.map((r,i)=>{\n\t\t\tr.map((c,ii)=>{\n\t\t\t\tif (!c.card) return\n\t\t\t\tif (c.card.poss === card.poss) return\n\t\t\t//check left and right\n\t\t\t\tif (i===row){\n\t\t\t\t\tif (ii===column-1){\n\t\t\t\t\t\tif (card.l > c.card.r) slots[i][ii].card.poss = this.turnPoss(c.card.poss)\n\t\t\t\t\t}\n\t\t\t\t\tif (ii===column+1){\n\t\t\t\t\t\tif (card.r > c.card.l) slots[i][ii].card.poss = this.turnPoss(c.card.poss)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//check top and bottom\n\t\t\t\tif (ii===column){\n\t\t\t\t\tif (i===row-1){\n\t\t\t\t\t\tif (card.u > c.card.d) slots[i][ii].card.poss = this.turnPoss(c.card.poss)\n\t\t\t\t\t}\n\t\t\t\t\tif (i===row+1){\n\t\t\t\t\t\tif (card.d > c.card.u) slots[i][ii].card.poss = this.turnPoss(c.card.poss)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\n\t\tthis.setState({slots})\n\t}\n\n\tupdateBoard = (slots, row, column, card) => {\n\t\tslots.map((r,i)=>{\n\t\t\tr.map((c,ii)=>{\n\t\t\t\tif (!c.card) return\n\t\t\t\tif (c.card.poss === card.poss) return\n\t\t\t//check left and right\n\t\t\t\tif (i===row){\n\t\t\t\t\tif (ii===column-1){\n\t\t\t\t\t\tif (card.l > c.card.r) this.flipCard(i,ii,c.card)\n\t\t\t\t\t}\n\t\t\t\t\tif (ii===column+1){\n\t\t\t\t\t\tif (card.r > c.card.l) this.flipCard(i,ii,c.card)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//check top and bottom\n\t\t\t\tif (ii===column){\n\t\t\t\t\tif (i===row-1){\n\t\t\t\t\t\tif (card.u > c.card.d) this.flipCard(i,ii,c.card)\n\t\t\t\t\t}\n\t\t\t\t\tif (i===row+1){\n\t\t\t\t\t\tif (card.d > c.card.u) this.flipCard(i,ii,c.card)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\tupdateSlots = (row,column,card) => {\n\t\tif (card) return\n\n\t\tconst {slots} = this.state\n\t\tconst {controlCard,updateHand} = this.props\n\n\t\tif (!controlCard) return\n\t\tthis.updateBoard(slots, row, column, controlCard)\n\n\t\tslots[row][column] = {\n\t\t\t\t\t\t...slots[row][column],\n\t\t\t\t\t\tcard: {...controlCard}\n\t\t\t\t\t\t}\n\n\t\tupdateHand(controlCard)\n\t\tthis.setState({slots})\n\t\t// websocket\n\t\tpushGameboard(slots)\n\t}\n\nrender(){\n\tconst {controlCard, hoverCard, updateHand, editControlCard} = this.props\n\tconst {slots} = this.state\n\n\tconst gameBoard = slots && slots.map((o,i)=>{\n\t\t\treturn o.map((card,ind)=>{\n\t\t\t\treturn <CardSlot key={Math.random(0,20000)} \n\t\t\t\trow={card.row} \n\t\t\t\tupdateSlots={this.updateSlots}\n\t\t\t\tcontrolCard={controlCard}\n\t\t\t\tcolumn={card.column} \n\t\t\t\tcard={card.card} />\n\t\t\t})\t\t\n\t\t})\n\n\n\treturn(\n\t\t<div style={{display:'flex',flexDirection: 'row', \n\t\tjustifyContent: 'center',\n\t\tflexWrap:'nowrap'}}> \n\t\t<Board>\n\t\t{gameBoard}\n\t\t</Board>\n\t\t<CommandLine \n\t\teditControlCard={editControlCard}\n\t\tcontrolCard={controlCard}\n\t\thoverCard={hoverCard}/>\n\t\t</div>)\n}\n\n}\n\nconst Board = styled.div`\nmargin:30px;\nwidth:380px;\nheight:330px;\nbackground:url(/static/img/timber.jpg/);\nbackground-size:cover;\nborder:1px solid #666;\nborder-radius:4px;\n`"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+BA;AACA;AACA;AAjCA;AAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAvEA;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAoGA;AADA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AApHA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AA2FA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AApJA;AACA;AADA;AAwJA;;;;A","sourceRoot":""}